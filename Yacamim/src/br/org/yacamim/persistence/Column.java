/**
 * Column.java
 *
 * Copyright 2012 yacamim.org.br
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package br.org.yacamim.persistence;

import static java.lang.annotation.ElementType.METHOD;
import static java.lang.annotation.RetentionPolicy.RUNTIME;

import java.lang.annotation.Documented;
import java.lang.annotation.Retention;
import java.lang.annotation.Target;

/**
 * Class Column TODO
 *
 * @author yacamim.org.br (Francisco Tarcizo Bomfim JÃºnior)
 * @version 1.0
 * @since 1.0
 */
@Target({ METHOD})
@Retention(RUNTIME)
@Documented
public @interface Column {

	/**
	 * (Optional) The name of the column. <br/>
	 * default The property or field name.
	 * @return
	 */
	String name() default "";
	
	/**
	 * (Optional) Whether the column is a unique key. This is a shortcut for the UniqueConstraint annotation at <br/>
	 * the table level and is useful for when the unique key constraint corresponds to only a single column. This  <br/>
	 * constraint applies in addition to any constraint entailed by primary key mapping and to constraints specified  <br/>
	 * at the table level. <br/>
	 * default false
	 * 
	 * @return
	 */
	boolean unique() default false;
	
	/**
	 * (Optional) Whether the database column is nullable.<br/>
	 * 
	 * @return
	 */
	boolean nullable() default false;

	/**
	 * (Optional) Whether the column is included in SQL INSERT statements generated by the persistence provider.<br/>
	 * default true
	 * 
	 * @return
	 */
	boolean insertable() default true;
	
	/**
	 * (Optional) Whether the column is included in SQL UPDATE statements generated by the persistence provider.<br/>
	 * default true
	 * @return
	 */
	boolean updatable() default true;
	
	/**
	 * (Optional) The SQL fragment that is used when generating the DDL for the column.<br/>
	 * @return
	 */
	String columnDefinition() default "";
	
	/**
	 * (Optional) The column length. (Applies only if a string-valued column is used.)<br/>
	 *  default 255
	 * 
	 * @return
	 */
	int length() default 255;

}